*vial.txt* a framework to develop VIM plugins in python

CONTENTS                                                 *vial-contents*

About                             |vial-about|
Tutorial                          |vial-tutor|
    Init function                 |vial-tutor-init|
    Load/reload plugin            |vial-tutor-load-reload|
    Calling python functions      |vial-tutor-call-python|
    Lazy functions                |vial-tutor-lazy-functions|
    register_function             |vial-tutor-register-function|
    register_command              |vial-tutor-create-command|
    Calling vim functions         |vial-tutor-call-vim|
    Plugin autodiscovery          |vial-tutor-plugin-autodiscovery|
Plugin API                        |vial-plugin-api.txt|
Examples                          |vial-examples|


ABOUT                                                       *vial-about*

Vial does not try to hide a VimL behind the scenes. It's a thin
wrapper for common tasks such as:

    * Calling python functions from VimL
    * Pass command and func args to python functions
    * Lazy loading of python plugins
    * Simple widgets
    * Window and buffer management

In simple cases you can write plugins without any VimL at all. But in
practice you should know about events, autocommands, buf/win options and
so on. Remember, vial's goal is not to hide VimL but to make writing
python plugins easy.


TUTORIAL                                                 *vial-tutorial*

Here I'll explain how to write a simple vial plugin. It will insert
'Hello world' string at cursor position.

Init function~
                                                       *vial-tutor-init*
Vial plugin is an ordinary python module. It must contain "init"
function which takes zero arguments.

PLUGIN STRUCTURE                                 *vial-plugin-structure*

The basic structure repeats an ordinary VIM plugin. You can use the same
directories (syntax, color, ftdetect, doc, ftplugin and so on). The only
difference is a "vial-plugin" dir. You should put your python code
there.
>
    hello-world/
        README.md
        LICENSE
        doc/
            hello-world.txt
        vial-plugin/
            hello_world/
                __init__.py
<
Note: "vial-plugin" contains a top-level package "hello_world".

Vial scans 'rtp' for "vial-plugin" directories and tries to load top
level packages as plugins. So, vial plugins are pathogen (and other PM)
friendly and you can manage plugins (enable/disable) with your favorite
tools.


EXAMPLES                                                 *vial-examples*


